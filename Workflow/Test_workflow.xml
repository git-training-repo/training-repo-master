<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow name="Test workflow" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event" transient="true" type="sailpoint.object.IdentityChangeEvent">
    <Description>
      The IdentityChangeEvent. It can be used to build
      the
      provisioning plan, but does not need to be
      persisted with the case,
      so marked as transient.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for
      this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan, which is built by a service method.</Description>
  </Variable>
  <Variable initializer="string:false" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning. This
      will cause
      changes to the entitlements compiled from role
      assignments to be
      applied immediately to the identity cube rather than waiting
      for the next
      refresh/reaggregation after the provisioning system
      completes the
      request.
    </Description>
  </Variable>
  <Variable initializer="string:true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the
      "background"
      option to force the workflow to be suspend and be
      resumed in a
      background task thread. This prevents the browser
      session from
      hanging since provision can sometimes take a long
      time. For demos
      and testing it can be better to do this in the
      foreground so that
      provisioning will have been performed when
      control is returned to the
      user. This prevents having to run the
      Perform Maintenance task to
      see the resutls of the request.
    </Description>
  </Variable>
  <Variable initializer="string:spadmin" input="true" name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that
      will
      be assigned any approvals where the owner of the approver
      can't be resolved. Example if the scheme is "owner" and the
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>
      String version of sailpoint.object.Source to indicate
      where the request originated. Defaults to LCM.
    </Description>
  </Variable>
  <Variable initializer="true" input="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true
      trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled version of
      the ProvisioningPlan.
    </Description>
  </Variable>
  <Variable name="identity">
    <Description>The name of AD application.</Description>
    <Script>
      <Source>
        import sailpoint.api.SailPointContext;
    return context.getObejctByName(Identity.class,identityName);
        </Source>
    </Script>
  </Variable>
  <Variable name="accounts"/>
  <Variable name="identityRequestId" output="true">
    <Description>
      The sequence id of the Identity request object which is stored in
      the name field of the identity request.
    </Description>
  </Variable>
  <Description>Joiner workflow. Enable Birthright roles when an employee
    joins the company.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Test Rule Lib"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="10" posY="20">
    <Description>Initiate the workflow</Description>
    <Script>
      <Source>
		log.error("entering the transfre workflow");
      </Source>
    </Script>
    <Transition to="Move OU"/>
  </Step>
  <Step name="Move OU">
    <Description>Change OU and provision it</Description>
    <Script>
      <Source>
				System.out.println(identity);
	  </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="526" posY="170"/>
</Workflow>