<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Pre Delegation Test 1" type="CertificationPreDelegation">
  <Description>A pre-delegation rule that is run on every CertificationEntity when the certification is generated in order to cause some entities to be pre-delegated.  As an example, a manager certification could pre-delegate the certification responsibility to each employee that reports to the manager.  This would allow each subordinate to first determine what they need access to, then allow the manager to review their decision.</Description>
  <Signature returnType="Map"/>
  <Source>import sailpoint.object.Identity;
	import sailpoint.object.CertificationItem;
	import sailpoint.object.Filter;
	
	import sailpoint.tools.Message;
	
	import java.util.List;
	import java.util.ArrayList;
	import java.util.HashMap;
	import java.util.Map;
	import java.util.Iterator;
	
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;

	Map results = new HashMap();
	Map applicationCache = new HashMap();
	List certList = new ArrayList();
	List items;
	CertificationItem itemObject;
	Identity certOwner;
//	Identity certMgr;
	Identity reAssignee;
	String reAssigneeName;
	Object[] args;
	
	
	//Get the admin work group name from the system configuration
//	String ADMIN_WORKGROUP = context.getConfiguration().getString("llymyAccessAdminWorkgroupName");
	
	//invoke method getLocalizedDescription in LLY Rule Library to get the localized description.First argument is message key
//	String description = Message.info("lly_eo_predelegation_description",args).getLocalizedMessage();	
//	String comments = Message.info("lly_eo_predelegation_comments",args).getLocalizedMessage();
//	log = LogFactory.getLog("com.lilly.iag.rule.certification.LLYEntitlementOwnerPreDelegationRule");

	try{		
		items = entity.getItems();
		if(items == null &amp;amp;&amp;amp; !items.isEmpty()){
			
			log.info("No items found to certify in the pre-delegation rule");
			return;
			
		}
		
		if (log.isDebugEnabled()){
		
			log.debug("Certification Item List:" + items);
			log.debug("No of entitlements in certification item: " + items.size());
			
		}
		
		//retrieving certification Owner by invoking context.getObjectByName because bulkReassign takes identity as an input
		certOwner = context.getObjectByName(Identity.class,certification.getCertifiers().get(0));
//		certMgr = certOwner.getManager();
		
	if (log.isDebugEnabled()){
				
					log.debug("Certification line item: " + entity.getFullname());
					log.debug("Current line item owner: " + certOwner.getName());
				
		}
		
//		reAssigneeName = ADMIN_WORKGROUP;

		//Condition to check if the certifier's supervisor is not null and supervisor does not belong to executive group, re-assign to certifier's supervisor
/*		if(certMgr != null &amp;amp;&amp;amp; !"true".equals(certMgr.getAttribute("llyExecutiveGroup")) ){
						
			reAssigneeName = certMgr.getName();
						
		}*/
				
	/*	// Loop to iterate through all line items to identify self-certification items
		for (Iterator it = items.iterator(); it.hasNext();) {
			
				itemObject = (CertificationItem)it.next();
				
				//update target displayName on the certification item so that identity display name is available for audit
				Object[] propertiesArray = getObjectPropertiesArray(Identity.class, Filter.eq("name", itemObject.getIdentity()), Arrays.asList(new String[] {"displayName"}));
				itemObject.setTargetDisplayName(propertiesArray[0]);
				
				//update the entitlement display name on the attributes clob for audit
				updateEntitlementDisplayName(itemObject, applicationCache);
		
				//Condition to check for self-certification
				if(itemObject.getIdentity().equals(certOwner.getName())){
										
					certList.add(itemObject);
					
				}
				
		}
			
		//Condition to check if there are any self certification items in the list certList
		if(certList != null &amp;amp;&amp;amp; certList.size() != 0){
			
			if (log.isDebugEnabled()){
						
						log.debug("This is a case of self-certification, line item will be reassigned to: " + reAssigneeName);
							
			}
			reAssignee = context.getObjectByName(Identity.class,reAssigneeName);
			certification.bulkReassign(certOwner,certList,reAssignee,description,comments,context.getConfiguration());
		}*/
		
		for (Iterator it = items.iterator(); it.hasNext();) {
		
		itemObject = (CertificationItem)it.next();
			
				certList.add(itemObject);	
				
		}
		
		reAssignee = context.getObjectByName(Identity.class,"a100005");
			certification.bulkReassign(certOwner,certList,reAssignee,"description","comments",context.getConfiguration());
		
	
		
		
		
		
		
			
		return results;
		
	}catch(Exception exception){
	
		log.error("Exception in Entitlement owner pre-delegation  rule: ",exception);
		
		
	}
  
  
  }
  </Source>
</Rule>